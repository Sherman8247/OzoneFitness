@page "/gyms/edit"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Gym</PageTitle>

<link rel="stylesheet" href="css/edit.razor.css">

<h1>Edit Gym</h1>

<h2>Gym Details</h2>
<hr />

@if (Gym == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Gym" OnValidSubmit="UpdateGym" FormName="editGym">
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />

                <input type="hidden" name="Gym.ID" value="@Gym.Id" />

                <div class="mb-3">
                    <label for="gymid" class="form-label">Gym ID:</label>
                    <InputNumber id="gymid" @bind-Value="Gym.GymId" class="form-control" />
                    <ValidationMessage For="() => Gym.GymId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Gym.Address" class="form-control" />
                    <ValidationMessage For="() => Gym.Address" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="operatinghours" class="form-label">Operating Hours:</label>
                    <InputText id="operatinghours" @bind-Value="Gym.OperatingHours" class="form-control" />
                    <ValidationMessage For="() => Gym.OperatingHours" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="capacity" class="form-label">Capacity:</label>
                    <InputNumber id="capacity" @bind-Value="Gym.Capacity" class="form-control" />
                    <ValidationMessage For="() => Gym.Capacity" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="datecreated" class="form-label">Date Created:</label>
                    <InputDate id="datecreated" @bind-Value="Gym.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Gym.DateCreated" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="dateupdated" class="form-label">Date Updated:</label>
                    <InputDate id="dateupdated" @bind-Value="Gym.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Gym.DateUpdated" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="createdby" class="form-label">Created By:</label>
                    <InputText id="createdby" @bind-Value="Gym.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Gym.CreatedBy" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="updatedby" class="form-label">Updated By:</label>
                    <InputText id="updatedby" @bind-Value="Gym.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Gym.UpdatedBy" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/gyms">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ID { get; set; }

    [SupplyParameterFromForm]
    private Gym? Gym { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Gym ??= await context.Gym.FirstOrDefaultAsync(m => m.GymId == ID);

        if (Gym == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateGym()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Gym!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!GymExists(Gym!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/gyms");
    }

    private bool GymExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Gym.Any(e => e.Id == id);
    }
}
