@page "/gyms/edit"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Gym</PageTitle>
<link rel="stylesheet" href="css/Edit.razor.css">
<body>
</body>
<div class="container">
    <h1 class="page-title">Edit Gym</h1>
    <p class="page-description">Update the details for the gym below.</p>

    @if (Gym == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <EditForm method="post" Model="Gym" OnValidSubmit="UpdateGym">
            <DataAnnotationsValidator />
            <ValidationSummary role="alert" />

            <!-- Gym ID -->
            <div class="form-group">
                <label for="gymid">Gym ID:</label>
                <InputNumber id="gymid" @bind-Value="Gym.GymId" class="form-control" />
                <ValidationMessage For="() => Gym.GymId" class="text-danger" />
            </div>

            <!-- Address -->
            <div class="form-group">
                <label for="address">Address:</label>
                <InputText id="address" @bind-Value="Gym.Address" class="form-control" />
                <ValidationMessage For="() => Gym.Address" class="text-danger" />
            </div>

            <!-- Operating Hours -->
            <div class="form-group">
                <label for="operatinghours">Operating Hours:</label>
                <InputText id="operatinghours" @bind-Value="Gym.OperatingHours" class="form-control" />
                <ValidationMessage For="() => Gym.OperatingHours" class="text-danger" />
            </div>

            <!-- Capacity -->
            <div class="form-group">
                <label for="capacity">Capacity:</label>
                <InputNumber id="capacity" @bind-Value="Gym.Capacity" class="form-control" />
                <ValidationMessage For="() => Gym.Capacity" class="text-danger" />
            </div>

            <!-- Date Created -->
            <div class="form-group">
                <label for="datecreated">Date Created:</label>
                <InputDate id="datecreated" @bind-Value="Gym.DateCreated" class="form-control" />
                <ValidationMessage For="() => Gym.DateCreated" class="text-danger" />
            </div>

            <!-- Date Updated -->
            <div class="form-group">
                <label for="dateupdated">Date Updated:</label>
                <InputDate id="dateupdated" @bind-Value="Gym.DateUpdated" class="form-control" />
                <ValidationMessage For="() => Gym.DateUpdated" class="text-danger" />
            </div>

            <!-- Created By -->
            <div class="form-group">
                <label for="createdby">Created By:</label>
                <InputText id="createdby" @bind-Value="Gym.CreatedBy" class="form-control" />
                <ValidationMessage For="() => Gym.CreatedBy" class="text-danger" />
            </div>

            <!-- Updated By -->
            <div class="form-group">
                <label for="updatedby">Updated By:</label>
                <InputText id="updatedby" @bind-Value="Gym.UpdatedBy" class="form-control" />
                <ValidationMessage For="() => Gym.UpdatedBy" class="text-danger" />
            </div>

            <!-- Action Buttons -->
            <div class="form-actions">
                <button type="submit" class="btn btn-primary">Save</button>
                <a href="/gyms" class="btn btn-secondary">Back to List</a>
            </div>
        </EditForm>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int ID { get; set; }

    [SupplyParameterFromForm]
    private Gym? Gym { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Gym ??= await context.Gym.FirstOrDefaultAsync(m => m.GymId == ID);

        if (Gym == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateGym()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Gym!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!GymExists(Gym!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/gyms");
    }

    private bool GymExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Gym.Any(e => e.Id == id);
    }
}
