@page "/gyms/delete"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete Gym</PageTitle>

<h1>Delete Gym</h1>
<body></body>
<p>Are you sure you want to delete this gym?</p>

<div class="container">
    <h2>Gym Details</h2>
    <hr />

    @if (gym is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <dl class="row">
            <dt class="col-sm-2">GymID</dt>
            <dd class="col-sm-10">@gym.GymId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@gym.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Operating Hours</dt>
            <dd class="col-sm-10">@gym.OperatingHours</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Capacity</dt>
            <dd class="col-sm-10">@gym.Capacity</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date Created</dt>
            <dd class="col-sm-10">@gym.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date Updated</dt>
            <dd class="col-sm-10">@gym.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Created By</dt>
            <dd class="col-sm-10">@gym.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Updated By</dt>
            <dd class="col-sm-10">@gym.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="gym" OnValidSubmit="DeleteGym">
            <button type="submit" class="btn btn-danger" disabled="@(gym is null)">Delete</button> |
            <a href="/gyms"class="btn btn-primary">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Gym? gym;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        gym = await context.Gym.FirstOrDefaultAsync(m => m.GymId == ID);

        if (gym is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteGym()
    {
        using var context = DbFactory.CreateDbContext();
        context.Gym.Remove(gym!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/gyms");
    }
}
