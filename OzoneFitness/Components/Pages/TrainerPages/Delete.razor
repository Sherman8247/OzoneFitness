@page "/trainers/delete"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>
<link rel="stylesheet" href="css/delete.razor.css">
<body>
</body>
<div class="delete-container">
    <h1 class="delete-title">Delete Trainer</h1>
    <p class="warning-text">Are you sure you want to delete this trainer?</p>

    @if (trainer == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="delete-content">
            <!-- Trainer Details -->
            <div class="details">
                <dl>
                    <dt>TrainerID:</dt>
                    <dd>@trainer.TrainerId</dd>
                    <dt>Name:</dt>
                    <dd>@trainer.Name</dd>
                    <dt>Contact Info:</dt>
                    <dd>@trainer.ContactInfo</dd>
                    <dt>Years of Experience:</dt>
                    <dd>@trainer.YearsOfExperience</dd>
                    <dt>GymID:</dt>
                    <dd>@trainer.GymId</dd>
                    <dt>Date Created:</dt>
                    <dd>@trainer.DateCreated</dd>
                    <dt>Date Updated:</dt>
                    <dd>@trainer.DateUpdated</dd>
                    <dt>Created By:</dt>
                    <dd>@trainer.CreatedBy</dd>
                    <dt>Updated By:</dt>
                    <dd>@trainer.UpdatedBy</dd>
                </dl>
            </div>

            <!-- Action Buttons -->
            <div class="actions">
                <EditForm method="post" Model="trainer" OnValidSubmit="DeleteTrainer" FormName="delete">
                    <button type="submit" class="btn-delete">Delete</button>
                </EditForm>
                <a href="/trainers" class="btn-cancel">Back to List</a>
            </div>
        </div>
    }
</div>

@code {
    private Trainer? trainer;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        trainer = await context.Trainer.FirstOrDefaultAsync(m => m.TrainerId == ID);

        if (trainer == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteTrainer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Trainer.Remove(trainer!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/trainers");
    }
}
