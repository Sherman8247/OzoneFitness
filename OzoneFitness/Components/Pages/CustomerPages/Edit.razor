@page "/customers/edit"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit Customer</PageTitle>
<link rel="stylesheet" href="css/Edit.razor.css">

<body>
    <div class="container">
        <h1 class="page-title">Edit Customer</h1>
        <p class="page-description">Update the details for the customer below.</p>

        @if (Customer == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <EditForm method="post" Model="Customer" OnValidSubmit="UpdateCustomer" FormName="editCustomerForm" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />

                <!-- Customer ID -->
                <div class="form-group">
                    <label for="customerid">Customer ID:</label>
                    <InputNumber id="customerid" @bind-Value="Customer.CustomerId" class="form-control" />
                    <ValidationMessage For="() => Customer.CustomerId" class="text-danger" />
                </div>

                <!-- Name -->
                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText id="name" @bind-Value="Customer.Name" class="form-control" />
                    <ValidationMessage For="() => Customer.Name" class="text-danger" />
                </div>

                <!-- Email -->
                <div class="form-group">
                    <label for="email">Email:</label>
                    <InputText id="email" @bind-Value="Customer.Email" class="form-control" />
                    <ValidationMessage For="() => Customer.Email" class="text-danger" />
                </div>

                <!-- Membership Status -->
                <div class="form-group">
                    <label for="membershipstatus">Membership Status:</label>
                    <InputText id="membershipstatus" @bind-Value="Customer.MembershipStatus" class="form-control" />
                    <ValidationMessage For="() => Customer.MembershipStatus" class="text-danger" />
                </div>

                <!-- Date Created -->
                <div class="form-group">
                    <label for="datecreated">Date Created:</label>
                    <InputDate id="datecreated" @bind-Value="Customer.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Customer.DateCreated" class="text-danger" />
                </div>

                <!-- Date Updated -->
                <div class="form-group">
                    <label for="dateupdated">Date Updated:</label>
                    <InputDate id="dateupdated" @bind-Value="Customer.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Customer.DateUpdated" class="text-danger" />
                </div>

                <!-- Created By -->
                <div class="form-group">
                    <label for="createdby">Created By:</label>
                    <InputText id="createdby" @bind-Value="Customer.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Customer.CreatedBy" class="text-danger" />
                </div>

                <!-- Updated By -->
                <div class="form-group">
                    <label for="updatedby">Updated By:</label>
                    <InputText id="updatedby" @bind-Value="Customer.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Customer.UpdatedBy" class="text-danger" />
                </div>

                <!-- Action Buttons -->
                <div class="form-actions">
                    <button type="submit" class="btn btn-primary">Save</button>
                    <a href="/customers" class="btn btn-secondary">Back to List</a>
                </div>
            </EditForm>
        }
    </div>
</body>

@code {
    [SupplyParameterFromQuery]
    private int ID { get; set; }

    [SupplyParameterFromForm]
    private Customer? Customer { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Customer ??= await context.Customer.FirstOrDefaultAsync(m => m.CustomerId == ID);

        if (Customer == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateCustomer()
    {
        using var context = DbFactory.CreateDbContext();
        //context.Attach(Customer!).State = EntityState.Modified; //REMOVED

        context.Update(Customer!); // UPDATED

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CustomerExists(Customer!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/customers");
    }

    private bool CustomerExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Customer.Any(e => e.Id == id);
    }
}