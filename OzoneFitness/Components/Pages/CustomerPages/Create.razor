@page "/customers/create"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create Customer</PageTitle>

<link rel="stylesheet" href="Customer.razor.css" />

<h1>Create Customer</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Customer" OnValidSubmit="AddCustomer">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div>
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="Customer.Name" class="form-control" />
                <ValidationMessage For="() => Customer.Name" class="text-danger" />
            </div>

            <div>
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="Customer.Email" class="form-control" />
                <ValidationMessage For="() => Customer.Email" class="text-danger" />
            </div>

            <div>
                <label for="membershipstatus" class="form-label">Membership Status:</label>
                <InputText id="membershipstatus" @bind-Value="Customer.MembershipStatus" class="form-control" />
                <ValidationMessage For="() => Customer.MembershipStatus" class="text-danger" />
            </div>

            <div>
                <label for="datecreated" class="form-label">Date Created:</label>
                <InputDate id="datecreated" @bind-Value="Customer.DateCreated" class="form-control" />
                <ValidationMessage For="() => Customer.DateCreated" class="text-danger" />
            </div>

            <div>
                <label for="createdby" class="form-label">Created By:</label>
                <InputText id="createdby" @bind-Value="Customer.CreatedBy" class="form-control" />
                <ValidationMessage For="() => Customer.CreatedBy" class="text-danger" />
            </div>

            <div>
                <label for="updatedby" class="form-label">Updated By:</label>
                <InputText id="updatedby" @bind-Value="Customer.UpdatedBy" class="form-control" />
                <ValidationMessage For="() => Customer.UpdatedBy" class="text-danger" />
            </div>

            <div class="mb-3">
                <label for="trainerImage" class="form-label">Upload Image:</label>
                <InputFile id="trainerImage" OnChange="UploadImage" class="form-control" />
            </div>

           

            <div class="image-preview">
                @if (!string.IsNullOrEmpty(previewImage))
                {
                    <img src="@previewImage" alt="Image Preview" class="img-preview" />
                }
                else
                {
                    <p>No image selected.</p>
                }
            </div>

            <button type="submit" class="btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/customers">Back to List</a>
</div>

@code {
    private Customer Customer { get; set; } = new();

    private string? previewImage;
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10_000_000).CopyToAsync(stream);
            Customer.Image = stream.ToArray();
            previewImage = $"data:{file.ContentType};base64,{Convert.ToBase64String(stream.ToArray())}";
        }
    }

    private async Task AddCustomer()
    {
        try
        {
            using var context = await DbFactory.CreateDbContextAsync();

            // Set default values before saving
            Customer.DateCreated = DateTime.UtcNow;
            Customer.DateUpdated = DateTime.UtcNow;

            Console.WriteLine($"Saving Customer: {Customer.Name}, Image: {Customer.Image?.Length ?? 0} bytes");

            context.Customer.Add(Customer);
            await context.SaveChangesAsync();

            Console.WriteLine("Customer saved successfully.");
            NavigationManager.NavigateTo("/customers");
        }
        catch (DbUpdateException ex)
        {
            Console.WriteLine($"Database Error: {ex.InnerException?.Message ?? ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
