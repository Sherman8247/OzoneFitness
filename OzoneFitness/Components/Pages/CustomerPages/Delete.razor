@page "/customers/delete"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>
<link rel="stylesheet" href="css/delete.razor.css">
<body></body>
<div class="container">
    <h1>Delete Customer</h1>
    <p class="delete-warning">Are you sure you want to delete this customer?</p>

    @if (customer == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <!-- Customer Details -->
        <div class="details">
            <dl class="row">
                <dt>Customer ID:</dt>
                <dd>@customer.CustomerId</dd>
            </dl>
            <dl class="row">
                <dt>Name:</dt>
                <dd>@customer.Name</dd>
            </dl>
            <dl class="row">
                <dt>Email:</dt>
                <dd>@customer.Email</dd>
            </dl>
            <dl class="row">
                <dt>Membership Status:</dt>
                <dd>@customer.MembershipStatus</dd>
            </dl>
            <dl class="row">
                <dt>Date Created:</dt>
                <dd>@customer.DateCreated</dd>
            </dl>
            <dl class="row">
                <dt>Date Updated:</dt>
                <dd>@customer.DateUpdated</dd>
            </dl>
            <dl class="row">
                <dt>Created By:</dt>
                <dd>@customer.CreatedBy</dd>
            </dl>
            <dl class="row">
                <dt>Updated By:</dt>
                <dd>@customer.UpdatedBy</dd>
            </dl>
        </div>

        <!-- Action Buttons -->
        <div class="delete-buttons">
            <EditForm method="post" Model="customer" OnValidSubmit="DeleteCustomer" FormName="deleteCustomer">
                <InputHidden Value="@customer.Id" />
                <button type="submit" class="btn btn-danger">Delete</button>
            </EditForm>
            <a href="/customers" class="btn btn-primary">Back to List</a>
        </div>
    }
</div>

@code {
    private Customer? customer;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        customer = await context.Customer.FirstOrDefaultAsync(m => m.CustomerId == ID);

        if (customer == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCustomer()
    {
        using var context = DbFactory.CreateDbContext();
         if (customer != null) // Ensure customer is not null
        {
            try
            {
                context.Customer.Remove(customer);
                await context.SaveChangesAsync();
                NavigationManager.NavigateTo("/customers");
            }
            catch (Exception ex)
            {
                // Log the exception or display an error message to the user
                Console.WriteLine($"Error deleting customer: {ex.Message}");
                // Optionally: Display an error message in the UI
            }
        }
        else
        {
            Console.WriteLine("Customer object is null. Cannot delete.");
            //Optionally: Display this error in the UI
        }
    }
}