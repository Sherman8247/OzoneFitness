@page "/customers"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using OzoneFitness.Domain
@using OzoneFitness.Data
@implements IAsyncDisposable
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Customer Management - Ozone Gym</PageTitle>

<div class="top-bar">
    <h1 class="logo">Ozone Gym</h1>
    <nav class="nav-links">
        <a href="/aboutus">About</a>
        <a href="/contacts">Contact</a>
        <a href="/customers">Customer Page</a>
        <a href="/trainers">Trainers Page</a>
        <a href="/schedules">Schedule Page</a>
        <a href="/feedbacks">Feedback Page</a>
        <a href="LoginHome" class="button">Back</a>
    </nav>
</div>
<body>
</body>
<link rel="stylesheet" href="css/Index.Razor.css">

<!-- Customer Management Content -->
<h1>Customer Management</h1>

<p>
    <a href="customers/create">Create New Customer</a>
</p>

<QuickGrid Class="table" Items="context.Customer">
    <PropertyColumn Property="customer => customer.CustomerId" />
    <PropertyColumn Property="customer => customer.Name" />
    <PropertyColumn Property="customer => customer.Email" />
    <PropertyColumn Property="customer => customer.MembershipStatus" />
    <PropertyColumn Property="customer => customer.DateCreated" />
    <PropertyColumn Property="customer => customer.DateUpdated" />
    <PropertyColumn Property="customer => customer.CreatedBy" />
    <PropertyColumn Property="customer => customer.UpdatedBy" />

    <TemplateColumn Context="customer">
        <a href="@($"customers/edit?id={customer.Id}")">Edit</a> |
        <a href="@($"customers/details?id={customer.Id}")">Details</a> |
        <a href="@($"customers/delete?id={customer.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

<!-- Footer or Additional Content if Needed -->
<p>Start your journey today! <a href="/">Back to Home</a></p>

@code {
    private OzoneFitnessContext context = default!;

    // On page initialization, load the context.
    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
    }

    // Dispose async on cleanup.
    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
