@page "/schedules/delete"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>
<link rel="stylesheet" href="css/delete.razor.css">
<body>

</body>
<div class="container">
    <h1>Delete Schedule</h1>
    <p class="delete-warning">Are you sure you want to delete this schedule?</p>

    @if (schedule == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <!-- Schedule Details -->
        <div class="details">
            <dl class="row">
                <dt>Schedule ID:</dt>
                <dd>@schedule.ScheduleId</dd>
            </dl>
            <dl class="row">
                <dt>Day of Week:</dt>
                <dd>@schedule.DayOfWeek</dd>
            </dl>
            <dl class="row">
                <dt>Start Time:</dt>
                <dd>@schedule.StartTime</dd>
            </dl>
            <dl class="row">
                <dt>End Time:</dt>
                <dd>@schedule.EndTime</dd>
            </dl>
            <dl class="row">
                <dt>Trainer ID:</dt>
                <dd>@schedule.TrainerId</dd>
            </dl>
            <dl class="row">
                <dt>Date Created:</dt>
                <dd>@schedule.DateCreated</dd>
            </dl>
            <dl class="row">
                <dt>Date Updated:</dt>
                <dd>@schedule.DateUpdated</dd>
            </dl>
        </div>

        <!-- Action Buttons -->
        <div class="delete-buttons">
            <EditForm method="post" Model="schedule" OnValidSubmit="DeleteSchedule">
                <button type="submit" class="btn btn-danger">Delete</button>
            </EditForm>
            <a href="/schedules" class="btn btn-primary">Back to List</a>
        </div>
    }
</div>

@code {
    private Schedule? schedule;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        schedule = await context.Schedule.FirstOrDefaultAsync(m => m.ScheduleId == ID);

        if (schedule == null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteSchedule()
    {
        using var context = DbFactory.CreateDbContext();
        context.Schedule.Remove(schedule!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/schedules");
    }
}

