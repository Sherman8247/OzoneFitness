@page "/schedules"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using OzoneFitness.Domain
@using OzoneFitness.Data
@implements IAsyncDisposable
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory

<PageTitle>Schedule Management - Ozone Gym</PageTitle>

<div class="top-bar">
    <h1 class="logo">Ozone Gym</h1>
    <nav class="nav-links">
        <a href="/aboutus">About</a>
        <a href="/contacts">Contact</a>
        <a href="/customers">Customer Page</a>
        <a href="/trainers">Trainers Page</a>
        <a href="/schedules">Schedule Page</a>
        <a href="/feedbacks">Feedback Page</a>
        <a href="LoginHome" class="button">Back</a>
    </nav>
</div>

<body>
</body>
<link rel="stylesheet" href="css/Index.Razor.css">

<h1>Schedule</h1>

<p>
    <a href="schedules/create">Create New Schedule</a>
</p>

<QuickGrid Class="table" Items="context.Schedule">
    <PropertyColumn Property="schedule => schedule.ScheduleId" />
    <PropertyColumn Property="schedule => schedule.DayOfWeek" />
    <PropertyColumn Property="schedule => schedule.StartTime" Title="Start Time" />
    <PropertyColumn Property="schedule => schedule.EndTime" Title="End Time" />
    <PropertyColumn Property="schedule => schedule.TrainerId" />
    <PropertyColumn Property="schedule => schedule.DateCreated" Title="Date Created" />
    <PropertyColumn Property="schedule => schedule.DateUpdated" Title="Date Updated" />
    <PropertyColumn Property="schedule => schedule.CreatedBy" Title="Created By" />
    <PropertyColumn Property="schedule => schedule.UpdatedBy" Title="Updated By" />

    <TemplateColumn Context="schedule">
        <a href="@($"schedules/edit?id={schedule.ScheduleId}")">Edit</a> |
        <a href="@($"schedules/details?id={schedule.ScheduleId}")">Details</a> |
        <a href="@($"schedules/delete?id={schedule.ScheduleId}")">Delete</a>
    </TemplateColumn>
</QuickGrid>

@code {
    private OzoneFitnessContext context = default!;

    protected override void OnInitialized()
    {
        // Initialize context for database access
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
