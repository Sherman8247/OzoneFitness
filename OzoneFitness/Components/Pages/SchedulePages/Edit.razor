@page "/schedules/edit"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@using OzoneFitness.Data
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Edit Schedule</PageTitle>
<link rel="stylesheet" href="css/Edit.razor.css">

<h1>Edit</h1>
<body>

</body>
<h2>Schedule</h2>
<hr />
@if (Schedule is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Schedule" OnValidSubmit="UpdateSchedule" FormName="edit">
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <div class="mb-3">
                    <label for="scheduleid" class="form-label">Schedule ID:</label>
                    <InputNumber id="scheduleid" @bind-Value="Schedule.ScheduleId" class="form-control" ReadOnly />
                    <ValidationMessage For="() => Schedule.ScheduleId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dayofweek" class="form-label">Day of Week:</label>
                    <InputText id="dayofweek" @bind-Value="Schedule.DayOfWeek" class="form-control" />
                    <ValidationMessage For="() => Schedule.DayOfWeek" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="starttime" class="form-label">Start Time:</label>
                    <InputText id="starttime" @bind-Value="Schedule.StartTime" class="form-control" />
                    <ValidationMessage For="() => Schedule.StartTime" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="endtime" class="form-label">End Time:</label>
                    <InputText id="endtime" @bind-Value="Schedule.EndTime" class="form-control" />
                    <ValidationMessage For="() => Schedule.EndTime" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="trainerid" class="form-label">Trainer ID:</label>
                    <InputNumber id="trainerid" @bind-Value="Schedule.TrainerId" class="form-control" />
                    <ValidationMessage For="() => Schedule.TrainerId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Schedule.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Schedule.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Schedule.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Schedule.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Schedule.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Schedule.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Schedule.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Schedule.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/schedules">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ID { get; set; }

    private Schedule? Schedule { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Schedule = await context.Schedule.FirstOrDefaultAsync(m => m.Id == ID);

        if (Schedule is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateSchedule()
    {
        using var context = DbFactory.CreateDbContext();

        if (Schedule is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }


        var existingSchedule = await context.Schedule.FindAsync(Schedule.Id);

        if (existingSchedule == null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        // Update the properties of the existing schedule with the values from the bound Schedule
        existingSchedule.ScheduleId = Schedule.ScheduleId;
        existingSchedule.DayOfWeek = Schedule.DayOfWeek;
        existingSchedule.StartTime = Schedule.StartTime;
        existingSchedule.EndTime = Schedule.EndTime;
        existingSchedule.TrainerId = Schedule.TrainerId;
        existingSchedule.DateCreated = Schedule.DateCreated;
        existingSchedule.DateUpdated = DateTime.Now;  // Update DateUpdated
        existingSchedule.CreatedBy = Schedule.CreatedBy;
        existingSchedule.UpdatedBy = Schedule.UpdatedBy;



        try
        {
            await context.SaveChangesAsync();
            NavigationManager.NavigateTo("/schedules");
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ScheduleExists(Schedule.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }


    }

    private bool ScheduleExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Schedule.Any(e => e.Id == id);
    }
}