@page "/schedules/create"
@using Microsoft.EntityFrameworkCore
@using OzoneFitness.Domain
@inject IDbContextFactory<OzoneFitness.Data.OzoneFitnessContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>
<body>

</body>
<h2>Schedule</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Schedule" OnValidSubmit="AddSchedule" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="scheduleid" class="form-label">ScheduleId:</label>
                <InputNumber id="scheduleid" @bind-Value="Schedule.ScheduleId" class="form-control" />
                <ValidationMessage For="() => Schedule.ScheduleId" class="text-danger" />
            </div>        
            <div class="mb-3">
                <label for="dayofweek" class="form-label">DayOfWeek:</label> 
                <InputText id="dayofweek" @bind-Value="Schedule.DayOfWeek" class="form-control" /> 
                <ValidationMessage For="() => Schedule.DayOfWeek" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="starttime" class="form-label">StartTime:</label> 
                <InputText id="starttime" @bind-Value="Schedule.StartTime" class="form-control" /> 
                <ValidationMessage For="() => Schedule.StartTime" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="endtime" class="form-label">EndTime:</label> 
                <InputText id="endtime" @bind-Value="Schedule.EndTime" class="form-control" /> 
                <ValidationMessage For="() => Schedule.EndTime" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="trainerid" class="form-label">TrainerId:</label>
                <InputNumber id="trainerid" @bind-Value="Schedule.TrainerId" class="form-control" />
                <ValidationMessage For="() => Schedule.TrainerId" class="text-danger" />
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Schedule.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Schedule.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Schedule.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Schedule.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Schedule.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Schedule.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Schedule.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Schedule.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/schedules">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Schedule Schedule { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddSchedule()
    {
        using var context = DbFactory.CreateDbContext();
        context.Schedule.Add(Schedule);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/schedules");
    }
}
